---
name: Limitador

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['*']
  merge_group:
    types: [checks_requested]
  workflow_dispatch:
  schedule:
    - cron: '5 4 * * *'

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: Swatinem/rust-cache@v2
      - uses: abelfodil/protoc-action@v1
        with:
          protoc-version: '3.19.4'
      - run: cargo check --all-features

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: supercharge/redis-github-action@1.1.0
        with:
          redis-version: 7
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: Swatinem/rust-cache@v2
      - uses: abelfodil/protoc-action@v1
        with:
          protoc-version: '3.19.4'
      - run: cargo test --all-features -vv

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - uses: abelfodil/protoc-action@v1
        with:
          protoc-version: '3.19.4'
      - run: cargo clippy --all-features --all-targets -- -D warnings

  kind:
    name: Try in kind (Kubernetes in Docker)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.11.1
          skipClusterCreation: true
      - run: |
          ./limitador-server/script/kind-setup.sh
          ips=$(kubectl get nodes -lkubernetes.io/hostname!=kind-control-plane -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}')
          port=$(kubectl -n default get service kuard -ojsonpath='{.spec.ports[?(@.name=="envoy-http")].nodePort}')
          curl "http://${ips[0]}:${port}"

  image:
    name: Build docker image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Dockerfile
            platform: linux/amd64
          - dockerfile: Dockerfile.aarch64
            platform: linux/arm64
    steps:
      - uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: limitador:dev
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: |
            ${{ matrix.platform }}
          provenance: false
          build-args: |
            GITHUB_SHA=${{ github.sha }}

  required-checks:
    name: Limitador Required Checks
    # This check adds a list of checks to one job to simplify adding settings to the repo.
    # If a new check is added in this file, and it should be retested on entry to the merge queue,
    # it needs to be added to the list below aka needs: [ existing check 1, existing check 2, new check ].
    needs: [check, test, fmt, clippy, image]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo '${{ toJSON(needs) }}' | jq -e 'all(.[]; .result == "success" or .result == "skipped")'
